// このファイルで使われる「会話の1ブロック」の型（設計図）を定義します。
export type ScenarioNode = {
  id: number; // 各会話ブロックを識別するための一意の番号です。
  question: string; // 面接官が話すセリフ（質問文）です。
  options: { // ユーザーが選べる選択肢のリスト（配列）です。
    text: string; // 選択肢ボタンに表示されるテキストです。
    nextId: number; // この選択肢を選んだ次に進むべき会話ブロックの「id」を指定します。
  }[];
};

// 実際の会話データ本体です。上記の ScenarioNode 型の配列になっています。
export const scenario: ScenarioNode[] = [
  {
    id: 1, // 会話の開始点です。
    question: "こんにちは。本日はよろしくお願いします。まずは自己紹介をお願いします。", // 最初の質問です。
    options: [
      // 1つ目の選択肢
      { text: "はい、サポーターズ大学のダヤン・ビシエドです。...", nextId: 2 }, // これを選ぶと、idが「2」の会話に進みます。
      // 2つ目の選択肢
      { text: "えーっと、何から話せば...", nextId: 100 }, // これを選ぶと、idが「100」の会話（詰まってしまうルート）に進みます。
    ],
  },
  {
    id: 2, // id:1 の1つ目の選択肢から繋がっています。
    question: "ありがとうございます。学生時代に最も力を入れたことは何ですか？",
    options: [
      { text: "ハッカソンでのチーム開発です。", nextId: 3 }, // これを選ぶとid:3に進みます。
      { text: "アルバイトでの接客経験です。", nextId: 4 }, // これを選ぶとid:4に進みます。
      { text: "学業です。", nextId: 5 }, // これを選ぶとid:5に進みます。
    ],
  },
  {
    id: 3, // id:2 の1つ目の選択肢から繋がっています。
    question: "素晴らしいですね！ハッカソンではどのような役割を？",
    options: [
      { text: "バックエンド開発を担当しました。", nextId: 99 }, // これを選ぶとid:99（会話終了）に進みます。
      { text: "主にリーダーとして全体をまとめました。", nextId: 99 },
      { text: 'お茶汲み係を担当していました。', nextId:99}
    ],
  },
  // ... 他の会話ルートも同様に定義します ...
  {
    id: 99, // 会話の終点の一つです。
    question: "なるほど、よく分かりました。本日は以上です。ありがとうございました。",
    options: [], // optionsが空の配列なので、これ以上選択肢は表示されず、会話はここで終了します。
  },
  {
    id: 100, // id:1 の2つ目の選択肢から繋がっています。
    question: "落ち着いてください。ゆっくりで大丈夫ですよ。",
    options: [
        { text: "すみません、もう一度お願いします。", nextId: 1 } // これを選ぶと、最初の質問(id:1)に戻ります。
    ],
  }
];
